import { Edit, Write } from "../../../utils/file.js";
import { Nextjs } from "../index.js";


export class PrimeReact extends Nextjs {
    constructor (
        name: string,
        packageManager: string,
        typescript: boolean,
        router: boolean,
        alias: string,
        eslint: boolean,
        srcDir: boolean,
    ) {
        super(
            name,
            packageManager,
            typescript,
            router,
            alias,
            eslint,
            srcDir,
        );
        this.dependencies = this.dependencies.concat(["primereact", "primeicons", "primeflex"]);
    }

    async Create() {
        await this.CreateNextjs();
        await this.InstallDependencies();

        this.WriteLayoutImports();
        this.ReplaceTailwindCss();
    }

    WriteLayoutImports() {
        const data = `import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { PrimeReactProvider } from "primereact/api";

import "./globals.css";
import "primeflex/primeflex.css"; // flex
import "primeicons/primeicons.css"; //icons
import "primereact/resources/primereact.min.css"; //core css
import "primereact/resources/themes/lara-light-indigo/theme.css"; //theme


const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default function RootLayout({
    children,
}: Readonly<{
  children: React.ReactNode;
}>) {
    return (
        <PrimeReactProvider>
            <html lang="en">
                <body className={inter.className}>{children}</body>
            </html>
        </PrimeReactProvider>
    );
}

`

        const path = this.srcDir ?
            `./src/app/layout.${this.typescript ? "tsx" : "jsx"}` :
            `./app/layout.${this.typescript ? "tsx" : "jsx"}`;

        Write(path, data);
    }

    ReplaceTailwindCss() {
        const data = `@layer tailwind-base, primereact, tailwind-utilities;

@layer tailwind-base {
  @tailwind base;
}

@layer tailwind-utilities {
  @tailwind components;
  @tailwind utilities;
}
`
        const replace = `@tailwind base;
@tailwind components;
@tailwind utilities;`

        const path = this.srcDir ? "./src/app/globals.css" : "./app/globals.css";

        Edit(path, (content) => {
            return content.replace(replace, data);
        });
    }
};
